// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tictactoe/game_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameState int32

const (
	GameState_New      GameState = 0
	GameState_Active   GameState = 1
	GameState_P1Turn   GameState = 2
	GameState_P2Turn   GameState = 3
	GameState_Draw     GameState = 4
	GameState_P1Winner GameState = 5
	GameState_P2Winner GameState = 6
)

var GameState_name = map[int32]string{
	0: "New",
	1: "Active",
	2: "P1Turn",
	3: "P2Turn",
	4: "Draw",
	5: "P1Winner",
	6: "P2Winner",
}

var GameState_value = map[string]int32{
	"New":      0,
	"Active":   1,
	"P1Turn":   2,
	"P2Turn":   3,
	"Draw":     4,
	"P1Winner": 5,
	"P2Winner": 6,
}

func (x GameState) String() string {
	return proto.EnumName(GameState_name, int32(x))
}

func (GameState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_537ce16449dce21e, []int{0}
}

type BoardState int32

const (
	BoardState_Unset BoardState = 0
	BoardState_P1    BoardState = 1
	BoardState_P2    BoardState = 2
)

var BoardState_name = map[int32]string{
	0: "Unset",
	1: "P1",
	2: "P2",
}

var BoardState_value = map[string]int32{
	"Unset": 0,
	"P1":    1,
	"P2":    2,
}

func (x BoardState) String() string {
	return proto.EnumName(BoardState_name, int32(x))
}

func (BoardState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_537ce16449dce21e, []int{1}
}

type GameInfo struct {
	Id    uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	P1    string       `protobuf:"bytes,2,opt,name=P1,proto3" json:"P1,omitempty"`
	P2    string       `protobuf:"bytes,3,opt,name=P2,proto3" json:"P2,omitempty"`
	State GameState    `protobuf:"varint,4,opt,name=state,proto3,enum=tictactoe.tictactoe.GameState" json:"state,omitempty"`
	Board []BoardState `protobuf:"varint,5,rep,packed,name=board,proto3,enum=tictactoe.tictactoe.BoardState" json:"board,omitempty"`
}

func (m *GameInfo) Reset()         { *m = GameInfo{} }
func (m *GameInfo) String() string { return proto.CompactTextString(m) }
func (*GameInfo) ProtoMessage()    {}
func (*GameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_537ce16449dce21e, []int{0}
}
func (m *GameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInfo.Merge(m, src)
}
func (m *GameInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameInfo proto.InternalMessageInfo

func (m *GameInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameInfo) GetP1() string {
	if m != nil {
		return m.P1
	}
	return ""
}

func (m *GameInfo) GetP2() string {
	if m != nil {
		return m.P2
	}
	return ""
}

func (m *GameInfo) GetState() GameState {
	if m != nil {
		return m.State
	}
	return GameState_New
}

func (m *GameInfo) GetBoard() []BoardState {
	if m != nil {
		return m.Board
	}
	return nil
}

func init() {
	proto.RegisterEnum("tictactoe.tictactoe.GameState", GameState_name, GameState_value)
	proto.RegisterEnum("tictactoe.tictactoe.BoardState", BoardState_name, BoardState_value)
	proto.RegisterType((*GameInfo)(nil), "tictactoe.tictactoe.GameInfo")
}

func init() { proto.RegisterFile("tictactoe/game_info.proto", fileDescriptor_537ce16449dce21e) }

var fileDescriptor_537ce16449dce21e = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0x87, 0x37, 0xd9, 0x3f, 0xb6, 0x83, 0x94, 0x10, 0x2f, 0x2b, 0x42, 0x5c, 0xbc, 0xb8, 0xf4,
	0xb0, 0x65, 0xa3, 0x7d, 0x00, 0x8b, 0x20, 0x5e, 0x64, 0xa9, 0x8a, 0xe0, 0x41, 0x49, 0xdb, 0x54,
	0x72, 0x68, 0x52, 0xb6, 0xd1, 0xea, 0x5b, 0xf8, 0x16, 0xbe, 0x8a, 0xc7, 0x1e, 0x3d, 0x4a, 0xfb,
	0x22, 0x92, 0x58, 0xda, 0x4b, 0x4f, 0xf9, 0x3e, 0xf2, 0x9b, 0x19, 0x98, 0x81, 0x43, 0xab, 0x86,
	0x56, 0x0c, 0xad, 0x91, 0x9d, 0x17, 0x31, 0x91, 0xcf, 0x4a, 0x8f, 0x4d, 0x31, 0xad, 0x8d, 0x35,
	0xf4, 0x60, 0xf3, 0x55, 0x6c, 0xe8, 0xe4, 0x0b, 0x41, 0xe3, 0x4a, 0x4c, 0xe4, 0xb5, 0x1e, 0x1b,
	0xda, 0x02, 0xac, 0x46, 0x29, 0xca, 0x50, 0x1e, 0xf5, 0xb1, 0x1a, 0x39, 0xaf, 0xca, 0x14, 0x67,
	0x28, 0x6f, 0xf6, 0x71, 0x55, 0x7a, 0xe7, 0x69, 0xb8, 0x76, 0x4e, 0xcf, 0x21, 0x9e, 0x59, 0x61,
	0x65, 0x1a, 0x65, 0x28, 0x6f, 0x71, 0x56, 0xec, 0x98, 0x50, 0xb8, 0xee, 0xb7, 0x2e, 0xd5, 0xff,
	0x0f, 0xd3, 0x2e, 0xc4, 0x03, 0x23, 0xea, 0x51, 0x1a, 0x67, 0x61, 0xde, 0xe2, 0xc7, 0x3b, 0xab,
	0x7a, 0x2e, 0xb1, 0x2e, 0xf3, 0xe9, 0xf6, 0x13, 0x34, 0x37, 0xad, 0xe8, 0x1e, 0x84, 0x37, 0x72,
	0x4e, 0x02, 0x0a, 0x90, 0x5c, 0x0c, 0xad, 0x7a, 0x93, 0x04, 0x39, 0xae, 0xca, 0xbb, 0xd7, 0x5a,
	0x13, 0xec, 0x99, 0x7b, 0x0e, 0x69, 0x03, 0xa2, 0xcb, 0x5a, 0xcc, 0x49, 0x44, 0xf7, 0xa1, 0x51,
	0x95, 0x0f, 0x4a, 0x6b, 0x59, 0x93, 0xd8, 0x1b, 0x5f, 0x5b, 0xd2, 0x3e, 0x05, 0xd8, 0x0e, 0xa5,
	0x4d, 0x88, 0xef, 0xf5, 0x4c, 0x5a, 0x12, 0xd0, 0xc4, 0x6d, 0x81, 0x20, 0xff, 0x72, 0x82, 0x7b,
	0xdd, 0xef, 0x25, 0x43, 0x8b, 0x25, 0x43, 0xbf, 0x4b, 0x86, 0x3e, 0x57, 0x2c, 0x58, 0xac, 0x58,
	0xf0, 0xb3, 0x62, 0xc1, 0xe3, 0xd1, 0x76, 0xf9, 0xef, 0x9d, 0x2d, 0xdb, 0x8f, 0xa9, 0x9c, 0x0d,
	0x12, 0x7f, 0x85, 0xb3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0xe7, 0xc5, 0x7d, 0xa2, 0x01,
	0x00, 0x00,
}

func (m *GameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Board) > 0 {
		dAtA2 := make([]byte, len(m.Board)*10)
		var j1 int
		for _, num := range m.Board {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGameInfo(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintGameInfo(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if len(m.P2) > 0 {
		i -= len(m.P2)
		copy(dAtA[i:], m.P2)
		i = encodeVarintGameInfo(dAtA, i, uint64(len(m.P2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.P1) > 0 {
		i -= len(m.P1)
		copy(dAtA[i:], m.P1)
		i = encodeVarintGameInfo(dAtA, i, uint64(len(m.P1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGameInfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGameInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovGameInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameInfo(uint64(m.Id))
	}
	l = len(m.P1)
	if l > 0 {
		n += 1 + l + sovGameInfo(uint64(l))
	}
	l = len(m.P2)
	if l > 0 {
		n += 1 + l + sovGameInfo(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovGameInfo(uint64(m.State))
	}
	if len(m.Board) > 0 {
		l = 0
		for _, e := range m.Board {
			l += sovGameInfo(uint64(e))
		}
		n += 1 + sovGameInfo(uint64(l)) + l
	}
	return n
}

func sovGameInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGameInfo(x uint64) (n int) {
	return sovGameInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= GameState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v BoardState
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= BoardState(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Board = append(m.Board, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameInfo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Board) == 0 {
					m.Board = make([]BoardState, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v BoardState
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= BoardState(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Board = append(m.Board, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGameInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGameInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGameInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGameInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGameInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGameInfo = fmt.Errorf("proto: unexpected end of group")
)
